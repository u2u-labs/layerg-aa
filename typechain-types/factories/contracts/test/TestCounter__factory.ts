/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestCounter,
  TestCounterInterface,
} from "../../../contracts/test/TestCounter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "CalledFrom",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countFail",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "counters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repeat",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "gasWaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "justemit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "offset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "xxx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576102ad908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c90816306661abd14610207578163278ddd3c146101c9578163a1b468901461013e578163a5e9585f14610116578163be65ab8c146100d9578163caece69314610091575063d55565441461007057600080fd5b3461008d578160031936011261008d576020906002549051908152f35b5080fd5b905082346100d657806003193601126100d657506020606492519162461bcd60e51b8352820152600c60248201526b18dbdd5b9d0819985a5b195960a21b6044820152fd5b80fd5b90503461011257602036600319011261011257356001600160a01b03811690819003610112578282916020945280845220549051908152f35b8280fd5b9050346101125760203660031901126101125760209282913581526001845220549051908152f35b919050346101125780600319360112610112578135916024359067ffffffffffffffff908183116101c557366023840112156101c5578201359081116101c15736910160240111610112576001805b83811115610199578480f35b6101bc9060026101a98154610252565b8091558652826020528084872055610252565b61018d565b8480fd5b8580fd5b50503461008d578160031936011261008d5760207ffb3b4d6258432a9a3d78dd9bffbcb6cfb1bd94f58da35fd530d08da7d1d058329151338152a180f35b919050346101125782600319360112610112573383528260205280832054916001830180931161023f57503383528260205282205580f35b634e487b7160e01b845260119052602483fd5b60001981146102615760010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220056da01ea7476f1579b2d1dc2b08ed2defc50d38740d631dbaf6b65eeec46cca64736f6c63430008130033";

type TestCounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCounter__factory extends ContractFactory {
  constructor(...args: TestCounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestCounter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestCounter__factory {
    return super.connect(runner) as TestCounter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCounterInterface {
    return new Interface(_abi) as TestCounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestCounter {
    return new Contract(address, _abi, runner) as unknown as TestCounter;
  }
}
