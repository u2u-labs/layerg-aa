/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestSignatureAggregator,
  TestSignatureAggregatorInterface,
} from "../../../contracts/test/TestSignatureAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576104bb908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c908163062a422b1461032a575080632dd81133146101a9578063451711591461010d5763ae574a431461005157600080fd5b3461010957602092836003193601126101055767ffffffffffffffff9381358581116101015761008490369084016103e4565b9085915b8083106100d65750505082519381850152835281830193838510908511176100c15750829052603f19906100bc818461039b565b030190f35b604190634e487b7160e01b6000525260246000fd5b9091956100f46100fa91856100ec8a868861043f565b013590610478565b9661041a565b9190610088565b8480fd5b8280fd5b5080fd5b508083916003193601126101055781356001600160a01b03811692908390036101a5578360243563ffffffff811680910361010957843b15610109576024845180968193621cb65b60e51b83528683015234905af1801561019b57610170578380f35b67ffffffffffffffff83116101885750528180808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8380fd5b5082903461010557806003193601126101055767ffffffffffffffff8235818111610101576101db90369085016103e4565b9190602435918083116103265736602384011215610326578286013590811161032657808301913660248401116103225793879488915b808310610304575050506020036102ad5781602091031261010157602401350361023a578280f35b90602060a492519162461bcd60e51b8352820152604160248201527f546573745369676e617475726556616c696461746f723a20616767726567617460448201527f6564207369676e6174757265206d69736d6174636820286e6f6e63652073756d6064820152602960f81b6084820152fd5b835162461bcd60e51b8152602081870152602b60248201527f546573745369676e617475726556616c696461746f723a20736967206d75737460448201526a103132903ab4b73a191a9b60a91b6064820152608490fd5b9091956100f461031b9160206100ec8a868861043f565b9190610212565b8780fd5b8680fd5b92905034610398576003196020368201126101095767ffffffffffffffff9085358281116101a55790610120913603011261010957602084019081118482101761038557610381945082528252519182918261039b565b0390f35b634e487b7160e01b825260418552602482fd5b80fd5b6020808252825181830181905290939260005b8281106103d057505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016103ae565b9181601f840112156104155782359167ffffffffffffffff8311610415576020808501948460051b01011161041557565b600080fd5b60001981146104295760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156104625760051b8101359061011e1981360301821215610415570190565b634e487b7160e01b600052603260045260246000fd5b919082018092116104295756fea2646970667358221220fb957993c469d4f645743a628a357e98f3c9bd8621892aae96787f51ddc5db0564736f6c63430008130033";

type TestSignatureAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSignatureAggregator__factory extends ContractFactory {
  constructor(...args: TestSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestSignatureAggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestSignatureAggregator__factory {
    return super.connect(runner) as TestSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSignatureAggregatorInterface {
    return new Interface(_abi) as TestSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestSignatureAggregator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestSignatureAggregator;
  }
}
