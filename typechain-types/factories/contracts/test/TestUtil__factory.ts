/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestUtil,
  TestUtilInterface,
} from "../../../contracts/test/TestUtil";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "encodeUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576101d5908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c63a124062e1461002b57600080fd5b346101605760206003199381853601126101645767ffffffffffffffff946004358681116101605780600401946101208093833603011261015c5760c4906100766044840188610167565b8291819337209161008a6064820188610167565b90818a519182372061009f60e4830189610167565b90818b5191823720895198356001600160a01b0316888a01526024830135898b015260608901949094526080880152608481013560a088015260a481013560c0880152013560e08601526101008086019190915284528301948511838610176101485784845281855282519182610140850152815b8381106101335750508282016101600152601f01601f19168101030190f35b80829186016101608382015191015201610114565b634e487b7160e01b81526041600452602490fd5b8380fd5b8280fd5b80fd5b903590601e198136030182121561019a570180359067ffffffffffffffff821161019a5760200191813603831361019a57565b600080fdfea26469706673582212208331acfa041e4046c268a2a0039240e5ad60591c7a1d7fcc8f40fd040ccd8d3f64736f6c63430008130033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestUtil & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestUtil__factory {
    return super.connect(runner) as TestUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new Interface(_abi) as TestUtilInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestUtil {
    return new Contract(address, _abi, runner) as unknown as TestUtil;
  }
}
