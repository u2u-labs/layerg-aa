/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../common";
import type {
  MaliciousAccount,
  MaliciousAccountInterface,
} from "../../../contracts/test/MaliciousAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080601f6102c938819003918201601f19168301916001600160401b038311848410176100745780849260209460405283398101031261006f57516001600160a01b0381169081900361006f57600080546001600160a01b03191691909117905560405161023e908161008b8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60808060405260048036101561001457600080fd5b600091823560e01c6319822f7c1461002b57600080fd5b346101e157600319906060368301126101dd5782359067ffffffffffffffff9081831161019d576101208336039485011261019d578554604435946001600160a01b039091169187833b156101da5781879463b760faf960e01b8252308a830152816024998a925af180156101cf576101a9575b5061010484013590602219018112156101a557830191858301359081116101a5578483019281360384136101a1576020918101031261019d5761010a6100ff60848501356fffffffffffffffffffffffffffffffff81169060801c6101e5565b60a4850135906101e5565b90811561018b579060c4910492013560801c820391821161017957350361013657602083604051908152f35b90601d60649260206040519362461bcd60e51b85528401528201527f5265766572742061667465722066697273742076616c69646174696f6e0000006044820152fd5b634e487b7160e01b8552601184528285fd5b634e487b7160e01b8752601286528487fd5b8580fd5b8780fd5b8680fd5b8381989298116101bd57604052953861009f565b634e487b7160e01b8252604187528582fd5b6040513d8a823e3d90fd5b80fd5b8380fd5b8280fd5b919082018092116101f257565b634e487b7160e01b600052601160045260246000fdfea264697066735822122094e4fa175947fda3a698f6c21d1a0b6269f51e1f10fd0cdc42e8b513c69b810864736f6c63430008130033";

type MaliciousAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousAccount__factory extends ContractFactory {
  constructor(...args: MaliciousAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _ep: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override deploy(
    _ep: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_ep, overrides || {}) as Promise<
      MaliciousAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MaliciousAccount__factory {
    return super.connect(runner) as MaliciousAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousAccountInterface {
    return new Interface(_abi) as MaliciousAccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MaliciousAccount {
    return new Contract(address, _abi, runner) as unknown as MaliciousAccount;
  }
}
