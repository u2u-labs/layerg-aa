/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestWrappedNativeToken,
  TestWrappedNativeTokenInterface,
} from "../../../contracts/test/TestWrappedNativeToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60803462000324576040906001600160401b03908083018281118282101762000224578352601481526020917f57726170706564204e617469766520546f6b656e00000000000000000000000083830152835184810181811083821117620002245785526005815264776e546f6b60d81b84820152825182811162000224576003918254916001958684811c9416801562000319575b8885101462000303578190601f94858111620002ad575b50889085831160011462000246576000926200023a575b505060001982861b1c191690861b1783555b8051938411620002245760049586548681811c9116801562000219575b828210146200020457838111620001b9575b50809285116001146200014b57509383949184926000956200013f575b50501b92600019911b1c19161790555b51610b6890816200032a8239f35b01519350388062000121565b92919084601f1981168860005285600020956000905b898383106200019e575050501062000183575b50505050811b01905562000131565b01519060f884600019921b161c191690553880808062000174565b85870151895590970196948501948893509081019062000161565b87600052816000208480880160051c820192848910620001fa575b0160051c019087905b828110620001ed57505062000104565b60008155018790620001dd565b92508192620001d4565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000f2565b634e487b7160e01b600052604160045260246000fd5b015190503880620000c3565b90889350601f19831691876000528a6000209260005b8c8282106200029657505084116200027d575b505050811b018355620000d5565b015160001983881b60f8161c191690553880806200026f565b8385015186558c979095019493840193016200025c565b90915085600052886000208580850160051c8201928b8610620002f9575b918a91869594930160051c01915b828110620002e9575050620000ac565b600081558594508a9101620002d9565b92508192620002cb565b634e487b7160e01b600052602260045260246000fd5b93607f169362000095565b600080fdfe608060408181526004918236101561002a575b505050361561002057600080fd5b610028610a94565b005b600092833560e01c91826306fdde031461065e57508163095ea7b31461063457816318160ddd1461061557816323b872dd1461054b5781632e1a7d4d146103a9578163313ce5671461038d578163395093511461033d57816370a082311461030657816395d89b4114610203578163a457c2d71461015e57508063a9059cbb1461012e578063d0e30db0146101145763dd62ed3e146100c95780610012565b34610110578060031936011261011057806020926100e5610798565b6100ed6107b3565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b828060031936011261012b57610128610a94565b80f35b80fd5b503461011057806003193601126101105760209061015761014d610798565b6024359033610824565b5160018152f35b9050823461012b578260031936011261012b57610179610798565b918360243592338152600160205281812060018060a01b03861682526020522054908282106101b2576020856101578585038733610992565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b838334610110578160031936011261011057805191809380549160019083821c928285169485156102fc575b60209586861081146102e9578589529081156102c5575060011461026d575b610269878761025f828c03836107c9565b519182918261074f565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106102b257505050826102699461025f9282010194868061024e565b8054868501880152928601928101610294565b60ff19168887015250505050151560051b830101925061025f82610269868061024e565b634e487b7160e01b845260228352602484fd5b93607f169361022f565b5050346101105760203660031901126101105760209181906001600160a01b0361032e610798565b16815280845220549051908152f35b505034610110578060031936011261011057610157602092610386610360610798565b338352600186528483206001600160a01b03821684528652918490205460243590610801565b9033610992565b5050346101105781600319360112610110576020905160128152f35b91905034610547576020908160031936011261054357823533156104f757338552848352818520548181106104a95785808381948294338452838952038683205580600254036002558186518281527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef893392a3335af13d156104a4573d67ffffffffffffffff81116104915782519061044c601f8201601f19168601836107c9565b815285843d92013e5b1561045e578380f35b5162461bcd60e51b815291820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015260649150fd5b634e487b7160e01b865260418552602486fd5b610455565b50505162461bcd60e51b815291820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260849150fd5b505162461bcd60e51b815291820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260849150fd5b8380fd5b8280fd5b8391503461011057606036600319011261011057610567610798565b61056f6107b3565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036105a9575b602086610157878787610824565b8482106105d257509183916105c76020969561015795033383610992565b91939481935061059b565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346101105781600319360112610110576020906002549051908152f35b505034610110578060031936011261011057602090610157610654610798565b6024359033610992565b92915034610543578360031936011261054357600354600181811c9186908281168015610745575b6020958686108214610732575084885290811561071057506001146106b7575b610269868661025f828b03836107c9565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106106fd57505050826102699461025f9282010194386106a6565b80548685018801529286019281016106e0565b60ff191687860152505050151560051b830101925061025f82610269386106a6565b634e487b7160e01b845260229052602483fd5b93607f1693610686565b6020808252825181830181905290939260005b82811061078457505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610762565b600435906001600160a01b03821682036107ae57565b600080fd5b602435906001600160a01b03821682036107ae57565b90601f8019910116810190811067ffffffffffffffff8211176107eb57604052565b634e487b7160e01b600052604160045260246000fd5b9190820180921161080e57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561093f57169182156108ee5760008281528060205260408120549180831061089a57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610a4357169182156109f35760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b3315610aed57610aa634600254610801565b600255336000526000602052604060002034815401905560405134815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fdfea264697066735822122003d1739aa4d4441221b4bf169e849a30ad6e23a7238f93e4484e64d58b698d1f64736f6c63430008130033";

type TestWrappedNativeTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWrappedNativeTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWrappedNativeToken__factory extends ContractFactory {
  constructor(...args: TestWrappedNativeTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestWrappedNativeToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestWrappedNativeToken__factory {
    return super.connect(runner) as TestWrappedNativeToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWrappedNativeTokenInterface {
    return new Interface(_abi) as TestWrappedNativeTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestWrappedNativeToken {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestWrappedNativeToken;
  }
}
