/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestHelpers,
  TestHelpersInterface,
} from "../../../contracts/test/TestHelpers";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "sigFailed",
        type: "bool",
      },
      {
        internalType: "uint48",
        name: "validUntil",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "validAfter",
        type: "uint48",
      },
    ],
    name: "packValidationData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "packValidationDataStruct",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    name: "parseValidationData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610277908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c806324d3cde614610142578063a4b2282e146100ba5763b059e2fa1461004057600080fd5b346100b65760603660031901126100b6576004359081151582036100b2579160209261006a6101f5565b9161007361020f565b93156100a9575060ff6001915b519365ffffffffffff60d01b9060d01b169265ffffffffffff60a01b9060a01b16911617178152f35b60ff9091610080565b8280fd5b5080fd5b50346100b65760203660031901126100b657606090600435906100db610224565b506100e4610224565b506001600160a01b0382169165ffffffffffff9060a081901c82169082908215610139575b81856101136101bf565b888152602081019360d01c84520193168352845195865251166020850152511690820152f35b91508091610109565b50346100b65760603660031901126100b65761015c6101bf565b906004356001600160a01b038116908181036101bb57602094508352816101816101f5565b93848682015261018f61020f565b9384910152519265ffffffffffff60d01b9060d01b169165ffffffffffff60a01b9060a01b1617178152f35b8480fd5b604051906060820182811067ffffffffffffffff8211176101df57604052565b634e487b7160e01b600052604160045260246000fd5b6024359065ffffffffffff8216820361020a57565b600080fd5b6044359065ffffffffffff8216820361020a57565b61022c6101bf565b9060008252600060208301526000604083015256fea2646970667358221220caabada7b47362b02cbffd62e2341b779a6be4450f5f906a5a992b5944453d2e64736f6c63430008130033";

type TestHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHelpers__factory extends ContractFactory {
  constructor(...args: TestHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestHelpers & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestHelpers__factory {
    return super.connect(runner) as TestHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHelpersInterface {
    return new Interface(_abi) as TestHelpersInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestHelpers {
    return new Contract(address, _abi, runner) as unknown as TestHelpers;
  }
}
