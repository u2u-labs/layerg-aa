/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../common";
import type {
  TestWarmColdAccount,
  TestWarmColdAccountInterface,
} from "../../../contracts/test/TestWarmColdAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
    ],
    name: "touchPaymaster",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "touchStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080601f61038e38819003918201601f19168301916001600160401b038311848410176100785780849260209460405283398101031261007357516001600160a01b038116908190036100735760018055600080546001600160a01b0319169190911790556040516102ff908161008f8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826319822f7c146100c557508163c19d93fb146100a6578163f115d40d14610072575063fb0c24251461005157600080fd5b3461006e578160031936011261006e576020906001549051908152f35b5080fd5b9050346100a25760203660031901126100a257356001600160a01b03811681036100a257602092503b9051908152f35b8280fd5b50503461006e578160031936011261006e576020906001549051908152f35b90849250346100a25760031960603682011261025157813567ffffffffffffffff9384821161028d576101208236039384011261028d5785546001600160a01b0316803b156102895781602481899363b760faf960e01b82523089830152604435905af1801561027f57610259575b506024810135600181036101ae575050845163fb0c242560e01b8152925060209183915081306103e8fa80156101a457610174575b506020915b51908152f35b602090813d811161019d575b61018a8183610291565b810103126101985782610169565b600080fd5b503d610180565b83513d84823e3d90fd5b6002146101c2575b5050505060209161016e565b60e4810135916022190182121561025557018181013592831161025157602401918036038313610251576014116100a257835163f115d40d60e01b8152913560601c90820152602081602481306103e8fa80156101a457610226575b8080806101b6565b602090813d811161024a575b61023c8183610291565b81010312610198578261021e565b503d610232565b8380fd5b8480fd5b84819692961161026c5786529386610134565b634e487b7160e01b825260418452602482fd5b87513d88823e3d90fd5b8680fd5b8580fd5b90601f8019910116810190811067ffffffffffffffff8211176102b357604052565b634e487b7160e01b600052604160045260246000fdfea264697066735822122033aa78889f5b19594161a349b92e811bcb70f9d3a17905900a069dbf9f94921a64736f6c63430008130033";

type TestWarmColdAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWarmColdAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWarmColdAccount__factory extends ContractFactory {
  constructor(...args: TestWarmColdAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _ep: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override deploy(
    _ep: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_ep, overrides || {}) as Promise<
      TestWarmColdAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestWarmColdAccount__factory {
    return super.connect(runner) as TestWarmColdAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWarmColdAccountInterface {
    return new Interface(_abi) as TestWarmColdAccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestWarmColdAccount {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestWarmColdAccount;
  }
}
