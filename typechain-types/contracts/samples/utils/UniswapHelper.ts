/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface UniswapHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "token"
      | "tokenToWei"
      | "uniswap"
      | "weiToToken"
      | "wrappedNative"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UniswapReverted"): EventFragment;

  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenToWei",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uniswap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weiToToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenToWei", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uniswap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weiToToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative",
    data: BytesLike
  ): Result;
}

export namespace UniswapRevertedEvent {
  export type InputTuple = [
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish
  ];
  export type OutputTuple = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOutMin: bigint
  ];
  export interface OutputObject {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOutMin: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UniswapHelper extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapHelper;
  waitForDeployment(): Promise<this>;

  interface: UniswapHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  token: TypedContractMethod<[], [string], "view">;

  tokenToWei: TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  uniswap: TypedContractMethod<[], [string], "view">;

  weiToToken: TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  wrappedNative: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenToWei"
  ): TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "uniswap"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weiToToken"
  ): TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "wrappedNative"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "UniswapReverted"
  ): TypedContractEvent<
    UniswapRevertedEvent.InputTuple,
    UniswapRevertedEvent.OutputTuple,
    UniswapRevertedEvent.OutputObject
  >;

  filters: {
    "UniswapReverted(address,address,uint256,uint256)": TypedContractEvent<
      UniswapRevertedEvent.InputTuple,
      UniswapRevertedEvent.OutputTuple,
      UniswapRevertedEvent.OutputObject
    >;
    UniswapReverted: TypedContractEvent<
      UniswapRevertedEvent.InputTuple,
      UniswapRevertedEvent.OutputTuple,
      UniswapRevertedEvent.OutputObject
    >;
  };
}
