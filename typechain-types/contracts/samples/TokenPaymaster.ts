/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PackedUserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  accountGasLimits: BytesLike;
  preVerificationGas: BigNumberish;
  gasFees: BytesLike;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type PackedUserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  accountGasLimits: string,
  preVerificationGas: bigint,
  gasFees: string,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: bigint;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export declare namespace TokenPaymaster {
  export type TokenPaymasterConfigStruct = {
    priceMarkup: BigNumberish;
    minEntryPointBalance: BigNumberish;
    refundPostopCost: BigNumberish;
    priceMaxAge: BigNumberish;
  };

  export type TokenPaymasterConfigStructOutput = [
    priceMarkup: bigint,
    minEntryPointBalance: bigint,
    refundPostopCost: bigint,
    priceMaxAge: bigint
  ] & {
    priceMarkup: bigint;
    minEntryPointBalance: bigint;
    refundPostopCost: bigint;
    priceMaxAge: bigint;
  };
}

export declare namespace OracleHelper {
  export type OracleHelperConfigStruct = {
    cacheTimeToLive: BigNumberish;
    maxOracleRoundAge: BigNumberish;
    tokenOracle: AddressLike;
    nativeOracle: AddressLike;
    tokenToNativeOracle: boolean;
    tokenOracleReverse: boolean;
    nativeOracleReverse: boolean;
    priceUpdateThreshold: BigNumberish;
  };

  export type OracleHelperConfigStructOutput = [
    cacheTimeToLive: bigint,
    maxOracleRoundAge: bigint,
    tokenOracle: string,
    nativeOracle: string,
    tokenToNativeOracle: boolean,
    tokenOracleReverse: boolean,
    nativeOracleReverse: boolean,
    priceUpdateThreshold: bigint
  ] & {
    cacheTimeToLive: bigint;
    maxOracleRoundAge: bigint;
    tokenOracle: string;
    nativeOracle: string;
    tokenToNativeOracle: boolean;
    tokenOracleReverse: boolean;
    nativeOracleReverse: boolean;
    priceUpdateThreshold: bigint;
  };
}

export declare namespace UniswapHelper {
  export type UniswapHelperConfigStruct = {
    minSwapAmount: BigNumberish;
    uniswapPoolFee: BigNumberish;
    slippage: BigNumberish;
  };

  export type UniswapHelperConfigStructOutput = [
    minSwapAmount: bigint,
    uniswapPoolFee: bigint,
    slippage: bigint
  ] & { minSwapAmount: bigint; uniswapPoolFee: bigint; slippage: bigint };
}

export interface TokenPaymasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStake"
      | "cachedPrice"
      | "cachedPriceTimestamp"
      | "deposit"
      | "entryPoint"
      | "getDeposit"
      | "owner"
      | "postOp"
      | "renounceOwnership"
      | "setTokenPaymasterConfig"
      | "setUniswapConfiguration"
      | "token"
      | "tokenPaymasterConfig"
      | "tokenToWei"
      | "transferOwnership"
      | "uniswap"
      | "unlockStake"
      | "updateCachedPrice"
      | "validatePaymasterUserOp"
      | "weiToToken"
      | "withdrawEth"
      | "withdrawStake"
      | "withdrawTo"
      | "withdrawToken"
      | "wrappedNative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfigUpdated"
      | "OwnershipTransferred"
      | "Received"
      | "TokenPriceUpdated"
      | "UniswapReverted"
      | "UserOperationSponsored"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cachedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cachedPriceTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postOp",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPaymasterConfig",
    values: [TokenPaymaster.TokenPaymasterConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapConfiguration",
    values: [UniswapHelper.UniswapHelperConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPaymasterConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToWei",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uniswap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlockStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCachedPrice",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePaymasterUserOp",
    values: [PackedUserOperationStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weiToToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cachedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedPriceTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postOp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPaymasterConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPaymasterConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenToWei", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniswap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCachedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePaymasterUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weiToToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative",
    data: BytesLike
  ): Result;
}

export namespace ConfigUpdatedEvent {
  export type InputTuple = [
    tokenPaymasterConfig: TokenPaymaster.TokenPaymasterConfigStruct
  ];
  export type OutputTuple = [
    tokenPaymasterConfig: TokenPaymaster.TokenPaymasterConfigStructOutput
  ];
  export interface OutputObject {
    tokenPaymasterConfig: TokenPaymaster.TokenPaymasterConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [sender: AddressLike, value: BigNumberish];
  export type OutputTuple = [sender: string, value: bigint];
  export interface OutputObject {
    sender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPriceUpdatedEvent {
  export type InputTuple = [
    currentPrice: BigNumberish,
    previousPrice: BigNumberish,
    cachedPriceTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    currentPrice: bigint,
    previousPrice: bigint,
    cachedPriceTimestamp: bigint
  ];
  export interface OutputObject {
    currentPrice: bigint;
    previousPrice: bigint;
    cachedPriceTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapRevertedEvent {
  export type InputTuple = [
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish
  ];
  export type OutputTuple = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOutMin: bigint
  ];
  export interface OutputObject {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOutMin: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserOperationSponsoredEvent {
  export type InputTuple = [
    user: AddressLike,
    actualTokenCharge: BigNumberish,
    actualGasCost: BigNumberish,
    actualTokenPriceWithMarkup: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    actualTokenCharge: bigint,
    actualGasCost: bigint,
    actualTokenPriceWithMarkup: bigint
  ];
  export interface OutputObject {
    user: string;
    actualTokenCharge: bigint;
    actualGasCost: bigint;
    actualTokenPriceWithMarkup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenPaymaster extends BaseContract {
  connect(runner?: ContractRunner | null): TokenPaymaster;
  waitForDeployment(): Promise<this>;

  interface: TokenPaymasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStake: TypedContractMethod<
    [unstakeDelaySec: BigNumberish],
    [void],
    "payable"
  >;

  cachedPrice: TypedContractMethod<[], [bigint], "view">;

  cachedPriceTimestamp: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  entryPoint: TypedContractMethod<[], [string], "view">;

  getDeposit: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  postOp: TypedContractMethod<
    [
      mode: BigNumberish,
      context: BytesLike,
      actualGasCost: BigNumberish,
      actualUserOpFeePerGas: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTokenPaymasterConfig: TypedContractMethod<
    [_tokenPaymasterConfig: TokenPaymaster.TokenPaymasterConfigStruct],
    [void],
    "nonpayable"
  >;

  setUniswapConfiguration: TypedContractMethod<
    [_uniswapHelperConfig: UniswapHelper.UniswapHelperConfigStruct],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokenPaymasterConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        priceMarkup: bigint;
        minEntryPointBalance: bigint;
        refundPostopCost: bigint;
        priceMaxAge: bigint;
      }
    ],
    "view"
  >;

  tokenToWei: TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswap: TypedContractMethod<[], [string], "view">;

  unlockStake: TypedContractMethod<[], [void], "nonpayable">;

  updateCachedPrice: TypedContractMethod<
    [force: boolean],
    [bigint],
    "nonpayable"
  >;

  validatePaymasterUserOp: TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      maxCost: BigNumberish
    ],
    [[string, bigint] & { context: string; validationData: bigint }],
    "nonpayable"
  >;

  weiToToken: TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawEth: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawStake: TypedContractMethod<
    [withdrawAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawTo: TypedContractMethod<
    [withdrawAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  wrappedNative: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStake"
  ): TypedContractMethod<[unstakeDelaySec: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cachedPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cachedPriceTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postOp"
  ): TypedContractMethod<
    [
      mode: BigNumberish,
      context: BytesLike,
      actualGasCost: BigNumberish,
      actualUserOpFeePerGas: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenPaymasterConfig"
  ): TypedContractMethod<
    [_tokenPaymasterConfig: TokenPaymaster.TokenPaymasterConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUniswapConfiguration"
  ): TypedContractMethod<
    [_uniswapHelperConfig: UniswapHelper.UniswapHelperConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenPaymasterConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        priceMarkup: bigint;
        minEntryPointBalance: bigint;
        refundPostopCost: bigint;
        priceMaxAge: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenToWei"
  ): TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswap"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unlockStake"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCachedPrice"
  ): TypedContractMethod<[force: boolean], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "validatePaymasterUserOp"
  ): TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      maxCost: BigNumberish
    ],
    [[string, bigint] & { context: string; validationData: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "weiToToken"
  ): TypedContractMethod<
    [amount: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawEth"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[withdrawAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [withdrawAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrappedNative"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ConfigUpdated"
  ): TypedContractEvent<
    ConfigUpdatedEvent.InputTuple,
    ConfigUpdatedEvent.OutputTuple,
    ConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TokenPriceUpdated"
  ): TypedContractEvent<
    TokenPriceUpdatedEvent.InputTuple,
    TokenPriceUpdatedEvent.OutputTuple,
    TokenPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UniswapReverted"
  ): TypedContractEvent<
    UniswapRevertedEvent.InputTuple,
    UniswapRevertedEvent.OutputTuple,
    UniswapRevertedEvent.OutputObject
  >;
  getEvent(
    key: "UserOperationSponsored"
  ): TypedContractEvent<
    UserOperationSponsoredEvent.InputTuple,
    UserOperationSponsoredEvent.OutputTuple,
    UserOperationSponsoredEvent.OutputObject
  >;

  filters: {
    "ConfigUpdated(tuple)": TypedContractEvent<
      ConfigUpdatedEvent.InputTuple,
      ConfigUpdatedEvent.OutputTuple,
      ConfigUpdatedEvent.OutputObject
    >;
    ConfigUpdated: TypedContractEvent<
      ConfigUpdatedEvent.InputTuple,
      ConfigUpdatedEvent.OutputTuple,
      ConfigUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;

    "TokenPriceUpdated(uint256,uint256,uint256)": TypedContractEvent<
      TokenPriceUpdatedEvent.InputTuple,
      TokenPriceUpdatedEvent.OutputTuple,
      TokenPriceUpdatedEvent.OutputObject
    >;
    TokenPriceUpdated: TypedContractEvent<
      TokenPriceUpdatedEvent.InputTuple,
      TokenPriceUpdatedEvent.OutputTuple,
      TokenPriceUpdatedEvent.OutputObject
    >;

    "UniswapReverted(address,address,uint256,uint256)": TypedContractEvent<
      UniswapRevertedEvent.InputTuple,
      UniswapRevertedEvent.OutputTuple,
      UniswapRevertedEvent.OutputObject
    >;
    UniswapReverted: TypedContractEvent<
      UniswapRevertedEvent.InputTuple,
      UniswapRevertedEvent.OutputTuple,
      UniswapRevertedEvent.OutputObject
    >;

    "UserOperationSponsored(address,uint256,uint256,uint256)": TypedContractEvent<
      UserOperationSponsoredEvent.InputTuple,
      UserOperationSponsoredEvent.OutputTuple,
      UserOperationSponsoredEvent.OutputObject
    >;
    UserOperationSponsored: TypedContractEvent<
      UserOperationSponsoredEvent.InputTuple,
      UserOperationSponsoredEvent.OutputTuple,
      UserOperationSponsoredEvent.OutputObject
    >;
  };
}
