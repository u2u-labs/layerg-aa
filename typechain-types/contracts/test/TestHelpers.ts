/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ValidationDataStruct = {
  aggregator: AddressLike;
  validAfter: BigNumberish;
  validUntil: BigNumberish;
};

export type ValidationDataStructOutput = [
  aggregator: string,
  validAfter: bigint,
  validUntil: bigint
] & { aggregator: string; validAfter: bigint; validUntil: bigint };

export interface TestHelpersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "packValidationData"
      | "packValidationDataStruct"
      | "parseValidationData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "packValidationData",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "packValidationDataStruct",
    values: [ValidationDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseValidationData",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "packValidationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packValidationDataStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseValidationData",
    data: BytesLike
  ): Result;
}

export interface TestHelpers extends BaseContract {
  connect(runner?: ContractRunner | null): TestHelpers;
  waitForDeployment(): Promise<this>;

  interface: TestHelpersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  packValidationData: TypedContractMethod<
    [sigFailed: boolean, validUntil: BigNumberish, validAfter: BigNumberish],
    [bigint],
    "view"
  >;

  packValidationDataStruct: TypedContractMethod<
    [data: ValidationDataStruct],
    [bigint],
    "view"
  >;

  parseValidationData: TypedContractMethod<
    [validationData: BigNumberish],
    [ValidationDataStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "packValidationData"
  ): TypedContractMethod<
    [sigFailed: boolean, validUntil: BigNumberish, validAfter: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "packValidationDataStruct"
  ): TypedContractMethod<[data: ValidationDataStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "parseValidationData"
  ): TypedContractMethod<
    [validationData: BigNumberish],
    [ValidationDataStructOutput],
    "view"
  >;

  filters: {};
}
